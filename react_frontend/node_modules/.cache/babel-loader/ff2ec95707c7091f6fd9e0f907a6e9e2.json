{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Vivi-ROG1070\\\\Desktop\\\\FlaskReact\\\\react_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Vivi-ROG1070\\\\Desktop\\\\FlaskReact\\\\react_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Vivi-ROG1070\\\\Desktop\\\\FlaskReact\\\\react_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Vivi-ROG1070\\\\Desktop\\\\FlaskReact\\\\react_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Vivi-ROG1070\\\\Desktop\\\\FlaskReact\\\\react_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Vivi-ROG1070\\\\Desktop\\\\FlaskReact\\\\react_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Vivi-ROG1070\\\\Desktop\\\\FlaskReact\\\\react_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Vivi-ROG1070\\\\Desktop\\\\FlaskReact\\\\react_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Vivi-ROG1070\\\\Desktop\\\\FlaskReact\\\\react_frontend\\\\src\\\\containers\\\\PolarAreaChartTab\\\\IndexPolarChart.js\";\nimport React, { Component } from \"react\";\nimport PolarAreaChart from \"../charts/PolarAreaChart\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport PolarAreaChartCard from \"./components/PolarAreaChartCard\";\nimport Papa from 'papaparse';\nimport ChartDataSource from 'chartjs-plugin-datasource';\n\nvar IndexPolarChart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(IndexPolarChart, _Component);\n\n  function IndexPolarChart(props) {\n    var _this;\n\n    _classCallCheck(this, IndexPolarChart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(IndexPolarChart).call(this, props));\n    _this.state = {\n      data: [],\n      chartData: {}\n    };\n    _this.getData = _this.getData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateData = _this.updateData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(IndexPolarChart, [{\n    key: \"getCsvData\",\n    value: function () {\n      var _getCsvData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var csvData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.fetchCsv();\n\n              case 2:\n                csvData = _context.sent;\n                Papa.parse(csvData, {\n                  preview: 1,\n                  complete: this.getData\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getCsvData() {\n        return _getCsvData.apply(this, arguments);\n      }\n\n      return getCsvData;\n    }()\n  }, {\n    key: \"fetchCsv\",\n    value: function fetchCsv() {\n      return fetch('../../../data.csv').then(function (response) {\n        var reader = response.body.getReader();\n        var decoder = new TextDecoder('utf-8');\n        return reader.read().then(function (result) {\n          return decoder.decode(result.value);\n        });\n      });\n    }\n  }, {\n    key: \"getData\",\n    value: function getData(result) {\n      this.setState({\n        data: result.data\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.getChartData(); //this.getCsvData();\n\n      Papa.parse('../../../data.csv', {\n        header: true,\n        download: true,\n        skipEmptyLines: true,\n        // Here this is also available. So we can call our custom class method\n        complete: this.updateData\n      });\n    }\n  }, {\n    key: \"updateData\",\n    value: function updateData(result) {\n      var data = result.data; // Here this is available and we can call this.setState (since it's binded in the constructor)\n\n      this.setState({\n        data: data\n      }); // or shorter ES syntax: this.setState({ data });\n\n      console.log(this.state.data);\n    }\n  }, {\n    key: \"getChartData\",\n    value: function getChartData() {\n      // Ajax calls here\n      this.setState({\n        chartData: {\n          labels: ['21:43', '21:44', '21:45', '21:46', '21:47', '21:48', '21:49', '21:50', '21:51', '21:52', '21:53', '21:54', '21:55', '21:56', '21:57', '21:58'],\n          datasets: [{\n            label: 'Kurs rzeczywisty 18.01.2019',\n            data: [1.13644, 1.13639, 1.13633, 1.136395, 1.13641, 1.136435, 1.13642, 1.13643, 1.136375, 1.136385, 1.13633, 1.136285, 1.13629, 1.135975, 1.136105, 1.136],\n            borderColor: \"#3cba9f\",\n            backgroundColor: ['rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)', 'rgba(255, 206, 86, 0.6)', 'rgba(75, 192, 192, 0.6)', 'rgba(153, 102, 255, 0.6)', 'rgba(255, 159, 64, 0.6)', 'rgba(255,184,42,0.6)', 'rgba(77,235,152,0.6)', 'rgba(18,255,33,0.6)', 'rgba(170,139,192,0.6)', 'rgba(255,0,198,0.6)', 'rgba(255, 159, 64, 0.6)', 'rgba(220,255,37,0.6)', 'rgba(192,30,28,0.6)', 'rgba(255,0,198,0.6)', 'rgba(251,255,227,0.6)'],\n            hoverBorderColor: \"#ba4f45\",\n            fill: false\n          }]\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var option = {\n        plugins: {\n          datasource: {\n            url: 'data.csv',\n            rowMapping: 'index'\n          }\n        }\n      };\n      return React.createElement(Container, {\n        className: \"dashboard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"page-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Kurs pary walutowej EUR/USD - wykres PolarAreaChart\"))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(PolarAreaChartCard, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(PolarAreaChart, {\n        chartData: this.state.chartData,\n        currencyPair: \"EUR/USD\",\n        legendPosition: \"bottom\",\n        plugins: [ChartDataSource],\n        options: option,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, this.props.data)));\n    }\n  }]);\n\n  return IndexPolarChart;\n}(Component);\n\nexport default IndexPolarChart;","map":{"version":3,"sources":["C:/Users/Vivi-ROG1070/Desktop/FlaskReact/react_frontend/src/containers/PolarAreaChartTab/IndexPolarChart.js"],"names":["React","Component","PolarAreaChart","Col","Container","Row","PolarAreaChartCard","Papa","ChartDataSource","IndexPolarChart","props","state","data","chartData","getData","bind","updateData","fetchCsv","csvData","parse","preview","complete","fetch","then","response","reader","body","getReader","decoder","TextDecoder","read","result","decode","value","setState","getChartData","header","download","skipEmptyLines","console","log","labels","datasets","label","borderColor","backgroundColor","hoverBorderColor","fill","option","plugins","datasource","url","rowMapping"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,SAAQC,GAAR,EAAaC,SAAb,EAAwBC,GAAxB,QAAkC,YAAlC;AACA,OAAOC,kBAAP,MAA+B,iCAA/B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,eAAP,MAA4B,2BAA5B;;IAEMC,e;;;;;AACF,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,yFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AAETC,MAAAA,IAAI,EAAE,EAFG;AAGTC,MAAAA,SAAS,EAAE;AAHF,KAAb;AAMA,UAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaC,IAAb,uDAAf;AACA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBD,IAAhB,uDAAlB;AAVe;AAWlB;;;;;;;;;;;;;;uBAIuB,KAAKE,QAAL,E;;;AAAhBC,gBAAAA,O;AAEJX,gBAAAA,IAAI,CAACY,KAAL,CAAWD,OAAX,EAAoB;AAChBE,kBAAAA,OAAO,EAAE,CADO;AAEhBC,kBAAAA,QAAQ,EAAE,KAAKP;AAFC,iBAApB;;;;;;;;;;;;;;;;;;+BAMO;AACP,aAAOQ,KAAK,CAAC,mBAAD,CAAL,CAA2BC,IAA3B,CAAgC,UAAUC,QAAV,EAAoB;AACvD,YAAIC,MAAM,GAAGD,QAAQ,CAACE,IAAT,CAAcC,SAAd,EAAb;AACA,YAAIC,OAAO,GAAG,IAAIC,WAAJ,CAAgB,OAAhB,CAAd;AAEA,eAAOJ,MAAM,CAACK,IAAP,GAAcP,IAAd,CAAmB,UAAUQ,MAAV,EAAkB;AACxC,iBAAOH,OAAO,CAACI,MAAR,CAAeD,MAAM,CAACE,KAAtB,CAAP;AACH,SAFM,CAAP;AAGH,OAPM,CAAP;AAQH;;;4BAEOF,M,EAAQ;AACZ,WAAKG,QAAL,CAAc;AAACtB,QAAAA,IAAI,EAAEmB,MAAM,CAACnB;AAAd,OAAd;AACH;;;yCAEoB;AACjB,WAAKuB,YAAL,GADiB,CAEjB;;AAEA5B,MAAAA,IAAI,CAACY,KAAL,CAAW,mBAAX,EAAgC;AAC5BiB,QAAAA,MAAM,EAAE,IADoB;AAE5BC,QAAAA,QAAQ,EAAE,IAFkB;AAG5BC,QAAAA,cAAc,EAAE,IAHY;AAI5B;AACAjB,QAAAA,QAAQ,EAAE,KAAKL;AALa,OAAhC;AAOH;;;+BAEUe,M,EAAQ;AACf,UAAMnB,IAAI,GAAGmB,MAAM,CAACnB,IAApB,CADe,CAEf;;AACA,WAAKsB,QAAL,CAAc;AAACtB,QAAAA,IAAI,EAAEA;AAAP,OAAd,EAHe,CAGc;;AAC7B2B,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAK7B,KAAL,CAAWC,IAAvB;AACH;;;mCAGc;AACX;AACA,WAAKsB,QAAL,CAAc;AACVrB,QAAAA,SAAS,EAAE;AACP4B,UAAAA,MAAM,EAAE,CACJ,OADI,EACI,OADJ,EACY,OADZ,EACoB,OADpB,EAC4B,OAD5B,EACoC,OADpC,EAC4C,OAD5C,EACoD,OADpD,EAC4D,OAD5D,EACoE,OADpE,EAC4E,OAD5E,EACoF,OADpF,EAC4F,OAD5F,EACoG,OADpG,EAC4G,OAD5G,EACoH,OADpH,CADD;AAKPC,UAAAA,QAAQ,EAAE,CACN;AACIC,YAAAA,KAAK,EAAE,6BADX;AAEI/B,YAAAA,IAAI,EAAE,CACF,OADE,EACM,OADN,EACc,OADd,EACsB,QADtB,EAC+B,OAD/B,EACuC,QADvC,EACgD,OADhD,EACwD,OADxD,EACgE,QADhE,EACyE,QADzE,EACkF,OADlF,EAC0F,QAD1F,EACmG,OADnG,EAC2G,QAD3G,EACoH,QADpH,EAC6H,KAD7H,CAFV;AAKIgC,YAAAA,WAAW,EAAE,SALjB;AAMIC,YAAAA,eAAe,EAAE,CACb,yBADa,EAEb,yBAFa,EAGb,yBAHa,EAIb,yBAJa,EAKb,0BALa,EAMb,yBANa,EAOb,sBAPa,EAQb,sBARa,EASb,qBATa,EAUb,uBAVa,EAWb,qBAXa,EAYb,yBAZa,EAab,sBAba,EAcb,qBAda,EAeb,qBAfa,EAgBb,uBAhBa,CANrB;AAwBIC,YAAAA,gBAAgB,EAAE,SAxBtB;AAyBIC,YAAAA,IAAI,EAAE;AAzBV,WADM;AALH;AADD,OAAd;AAqCH;;;6BAEQ;AAEL,UAAMC,MAAM,GAAG;AACXC,QAAAA,OAAO,EAAE;AACLC,UAAAA,UAAU,EAAE;AACRC,YAAAA,GAAG,EAAE,UADG;AAERC,YAAAA,UAAU,EAAE;AAFJ;AADP;AADE,OAAf;AASA,aACI,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAC,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DADJ,CADJ,CADJ,EAMI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CANJ,EASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,cAAD;AAAgB,QAAA,SAAS,EAAE,KAAKzC,KAAL,CAAWE,SAAtC;AAAiD,QAAA,YAAY,EAAC,SAA9D;AAAwE,QAAA,cAAc,EAAC,QAAvF;AACgB,QAAA,OAAO,EAAE,CAACL,eAAD,CADzB;AAC4C,QAAA,OAAO,EAAEwC,MADrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CATJ,EAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKtC,KAAL,CAAWE,IAAf,CADJ,CAbJ,CADJ;AAmBH;;;;EAnIyBX,S;;AAsI9B,eAAeQ,eAAf","sourcesContent":["import React, {Component} from \"react\";\r\nimport PolarAreaChart from \"../charts/PolarAreaChart\";\r\nimport {Col, Container, Row} from \"reactstrap\";\r\nimport PolarAreaChartCard from \"./components/PolarAreaChartCard\";\r\nimport Papa from 'papaparse';\r\nimport ChartDataSource from 'chartjs-plugin-datasource';\r\n\r\nclass IndexPolarChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n            data: [],\r\n            chartData: {}\r\n        };\r\n\r\n        this.getData = this.getData.bind(this);\r\n        this.updateData = this.updateData.bind(this);\r\n    }\r\n\r\n\r\n    async getCsvData() {\r\n        let csvData = await this.fetchCsv();\r\n\r\n        Papa.parse(csvData, {\r\n            preview: 1,\r\n            complete: this.getData\r\n        });\r\n    }\r\n\r\n    fetchCsv() {\r\n        return fetch('../../../data.csv').then(function (response) {\r\n            let reader = response.body.getReader();\r\n            let decoder = new TextDecoder('utf-8');\r\n\r\n            return reader.read().then(function (result) {\r\n                return decoder.decode(result.value);\r\n            });\r\n        });\r\n    }\r\n\r\n    getData(result) {\r\n        this.setState({data: result.data});\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.getChartData();\r\n        //this.getCsvData();\r\n\r\n        Papa.parse('../../../data.csv', {\r\n            header: true,\r\n            download: true,\r\n            skipEmptyLines: true,\r\n            // Here this is also available. So we can call our custom class method\r\n            complete: this.updateData\r\n        });\r\n    }\r\n\r\n    updateData(result) {\r\n        const data = result.data;\r\n        // Here this is available and we can call this.setState (since it's binded in the constructor)\r\n        this.setState({data: data}); // or shorter ES syntax: this.setState({ data });\r\n        console.log(this.state.data)\r\n    }\r\n\r\n\r\n    getChartData() {\r\n        // Ajax calls here\r\n        this.setState({\r\n            chartData: {\r\n                labels: [\r\n                    '21:43','21:44','21:45','21:46','21:47','21:48','21:49','21:50','21:51','21:52','21:53','21:54','21:55','21:56','21:57','21:58'\r\n                ],\r\n\r\n                datasets: [\r\n                    {\r\n                        label: 'Kurs rzeczywisty 18.01.2019',\r\n                        data: [\r\n                            1.13644,1.13639,1.13633,1.136395,1.13641,1.136435,1.13642,1.13643,1.136375,1.136385,1.13633,1.136285,1.13629,1.135975,1.136105,1.136\r\n                        ],\r\n                        borderColor: \"#3cba9f\",\r\n                        backgroundColor: [\r\n                            'rgba(255, 99, 132, 0.6)',\r\n                            'rgba(54, 162, 235, 0.6)',\r\n                            'rgba(255, 206, 86, 0.6)',\r\n                            'rgba(75, 192, 192, 0.6)',\r\n                            'rgba(153, 102, 255, 0.6)',\r\n                            'rgba(255, 159, 64, 0.6)',\r\n                            'rgba(255,184,42,0.6)',\r\n                            'rgba(77,235,152,0.6)',\r\n                            'rgba(18,255,33,0.6)',\r\n                            'rgba(170,139,192,0.6)',\r\n                            'rgba(255,0,198,0.6)',\r\n                            'rgba(255, 159, 64, 0.6)',\r\n                            'rgba(220,255,37,0.6)',\r\n                            'rgba(192,30,28,0.6)',\r\n                            'rgba(255,0,198,0.6)',\r\n                            'rgba(251,255,227,0.6)'\r\n                        ],\r\n                        hoverBorderColor: \"#ba4f45\",\r\n                        fill: false\r\n                    }\r\n                ]\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        const option = {\r\n            plugins: {\r\n                datasource: {\r\n                    url: 'data.csv',\r\n                    rowMapping: 'index'\r\n                }\r\n            }\r\n        };\r\n\r\n        return (\r\n            <Container className=\"dashboard\">\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <h3 className=\"page-title\">Kurs pary walutowej EUR/USD - wykres PolarAreaChart</h3>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <PolarAreaChartCard/>\r\n                </Row>\r\n                <div>\r\n                    <PolarAreaChart chartData={this.state.chartData} currencyPair=\"EUR/USD\" legendPosition=\"bottom\"\r\n                                    plugins={[ChartDataSource]} options={option}/>\r\n                </div>\r\n                <div>\r\n                    <p>{this.props.data}</p>\r\n                    </div>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default IndexPolarChart;"]},"metadata":{},"sourceType":"module"}